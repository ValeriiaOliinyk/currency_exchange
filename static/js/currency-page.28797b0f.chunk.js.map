{"version":3,"sources":["components/CurrencyRow/CurrencyRow.js","components/Convert/Convert.js","views/Currency/Currency.js","redux/currency/currency-selectors.js"],"names":["CurrencyRow","dispatch","useDispatch","currency","useSelector","getCurrencyArray","selectedFromCurrency","getFromCurrency","selectedToCurrency","getToCurrency","selectedExchangeRate","getExchangeRate","useState","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","loadData","fromAmount","toAmount","toFixed","axios","then","data","rates","catch","error","console","log","updateData","type","value","onChange","e","target","map","item","key","Convert","Currency","getCurrency","state","currencyTypes","base","Object","keys","firstCurrency","getFavorites","favorite","getNumberOfFavorites","length","getRegularCurrency","favorites","filter","n","indexOf"],"mappings":"qMAae,SAASA,IACtB,IAAMC,EAAWC,cAEXC,EAAWC,YAAYC,KACvBC,EAAuBF,YAAYG,KACnCC,EAAqBJ,YAAYK,KACjCC,EAAuBN,YAAYO,KANL,EAQIC,mBAAS,IARb,mBAQ7BC,EAR6B,KAQfC,EARe,OASAF,mBAAS,IATT,mBAS7BG,EAT6B,KASjBC,EATiB,OAUIJ,mBAAS,GAVb,mBAU7BK,EAV6B,KAUfC,EAVe,OAWRN,mBAAS,GAXD,mBAW7BO,EAX6B,KAWrBC,EAXqB,OAYoBR,oBAAS,GAZ7B,mBAY7BS,EAZ6B,KAYPC,EAZO,KAcpCC,qBAAU,WACRtB,EAASuB,iBACR,CAACvB,IAEJsB,qBAAU,WACJjB,GAAwBE,IAC1BM,EAAgBR,GAChBU,EAAcR,EAAmB,IACjCU,EAAgBR,MAEjB,CAACA,EAAsBJ,EAAsBE,IAEhD,IAAIiB,EAAa,KACbC,EAAW,KAEXL,GACFI,EAAaN,EACbO,GAAYP,EAASF,GAAcU,QAAQ,KAE3CD,EAAWP,EACXM,GAAcN,EAASF,GAAcU,QAAQ,IAsB/C,OATAJ,qBAAU,WACJV,GAAgBE,GAClBa,IAAM,GAAD,OAnDM,yCAmDN,iBAAqBf,EAArB,oBAA6CE,IAC/Cc,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcZ,EAAgBY,EAAKC,MAAMhB,OAC9CiB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAElChC,EAASmC,YAAWvB,EAAcE,MACjC,CAACd,EAAUY,EAAcE,IAG1B,6BACE,2BACEsB,KAAK,SACLC,MAAOb,EACPc,SAxByB,SAACC,GAC9BpB,EAAUoB,EAAEC,OAAOH,OACnBhB,GAAwB,MAwBtB,4BACEgB,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAgB0B,EAAEC,OAAOH,SAEzCnC,GACCA,EAASuC,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAML,MAAOK,GACvBA,OAIT,kCACA,2BAAON,KAAK,SAASC,MAAOZ,EAAUa,SAjCb,SAACC,GAC5BpB,EAAUoB,EAAEC,OAAOH,OACnBhB,GAAwB,MAgCtB,4BACEgB,MAAOvB,EACPwB,SAAU,SAACC,GAAD,OAAOxB,EAAcwB,EAAEC,OAAOH,SAEvCnC,GACCA,EAASuC,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAML,MAAOK,GACvBA,QC7Ff,IASeE,EATC,WACd,OACE,oCACE,uCACA,kBAAC7C,EAAD,QCOS8C,UATE,WACf,OACE,oCACE,6CACA,kBAAC,EAAD,S,0RCTOC,EAAc,SAACC,GAAD,OAAWA,EAAM7C,SAAS8C,eAExC5C,EAAmB,SAAC2C,GAC/B,IAAM7C,EAAW4C,EAAYC,GAC7B,GAAI7C,EAAS4B,OAAS5B,EAAS+C,KAC7B,MAAM,CAAE/C,EAAS+C,MAAjB,mBAA0BC,OAAOC,KAAKjD,EAAS4B,UAItCxB,EAAkB,SAACyC,GAC9B,IAAM7C,EAAW4C,EAAYC,GAC7B,GAAI7C,EAAS+C,KACX,OAAO/C,EAAS+C,MAIPzC,EAAgB,SAACuC,GAC5B,IAAM7C,EAAW4C,EAAYC,GAC7B,GAAI7C,EAAS4B,MACX,MAAO,CAACoB,OAAOC,KAAKjD,EAAS4B,OAAO,KAI3BpB,EAAkB,SAACqC,GAC9B,IAAM7C,EAAW4C,EAAYC,GACvBK,EAAgB5C,EAAcuC,GACpC,GAAI7C,GAAYkD,EACd,OAAOlD,EAAS4B,MAAMsB,IAIbC,EAAe,SAACN,GAAD,OAAWA,EAAMO,UAChCC,EAAuB,SAACR,GAAD,OAAWA,EAAMO,SAASE,QACjDC,EAAqB,SAACV,GACjC,IAAM7C,EAAWE,EAAiB2C,GAC5BW,EAAYL,EAAaN,GAC/B,GAAI7C,EACF,OAAOA,EAASyD,QAAO,SAACC,GAAD,OAAiC,IAA1BF,EAAUG,QAAQD","file":"static/js/currency-page.28797b0f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getCurrencyArray,\r\n  getFromCurrency,\r\n  getToCurrency,\r\n  getExchangeRate,\r\n} from \"../../redux/currency/currency-selectors\";\r\nimport { loadData, updateData } from \"../../redux/currency/currency-reducers\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\r\n\r\nexport default function CurrencyRow() {\r\n  const dispatch = useDispatch();\r\n\r\n  const currency = useSelector(getCurrencyArray);\r\n  const selectedFromCurrency = useSelector(getFromCurrency);\r\n  const selectedToCurrency = useSelector(getToCurrency);\r\n  const selectedExchangeRate = useSelector(getExchangeRate);\r\n\r\n  const [fromCurrency, setFromCurrency] = useState(\"\");\r\n  const [toCurrency, setToCurrency] = useState(\"\");\r\n  const [exchangeRate, setExchangeRate] = useState(0);\r\n  const [amount, setAmount] = useState(1);\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\r\n\r\n  useEffect(() => {\r\n    dispatch(loadData());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFromCurrency && selectedToCurrency) {\r\n      setFromCurrency(selectedFromCurrency);\r\n      setToCurrency(selectedToCurrency[0]);\r\n      setExchangeRate(selectedExchangeRate);\r\n    }\r\n  }, [selectedExchangeRate, selectedFromCurrency, selectedToCurrency]);\r\n\r\n  let fromAmount = null;\r\n  let toAmount = null;\r\n\r\n  if (amountInFromCurrency) {\r\n    fromAmount = amount;\r\n    toAmount = (amount * exchangeRate).toFixed(1);\r\n  } else {\r\n    toAmount = amount;\r\n    fromAmount = (amount / exchangeRate).toFixed(1);\r\n  }\r\n\r\n  const handleFromAmountChange = (e) => {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(true);\r\n  };\r\n\r\n  const handleToAmountChange = (e) => {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fromCurrency && toCurrency) {\r\n      axios(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\r\n        .then(({ data }) => setExchangeRate(data.rates[toCurrency]))\r\n        .catch((error) => console.log(error));\r\n    }\r\n    dispatch(updateData(fromCurrency, toCurrency));\r\n  }, [dispatch, fromCurrency, toCurrency]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        value={fromAmount}\r\n        onChange={handleFromAmountChange}\r\n      />\r\n      <select\r\n        value={fromCurrency}\r\n        onChange={(e) => setFromCurrency(e.target.value)}\r\n      >\r\n        {currency &&\r\n          currency.map((item) => (\r\n            <option key={item} value={item}>\r\n              {item}\r\n            </option>\r\n          ))}\r\n      </select>\r\n      <div>=</div>\r\n      <input type=\"number\" value={toAmount} onChange={handleToAmountChange} />\r\n      <select\r\n        value={toCurrency}\r\n        onChange={(e) => setToCurrency(e.target.value)}\r\n      >\r\n        {currency &&\r\n          currency.map((item) => (\r\n            <option key={item} value={item}>\r\n              {item}\r\n            </option>\r\n          ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CurrencyRow from \"../CurrencyRow/CurrencyRow\";\r\n\r\nconst Convert = () => {\r\n  return (\r\n    <>\r\n      <h2>Convert</h2>\r\n      <CurrencyRow />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Convert;\r\n","import React from \"react\";\r\n\r\n// Components\r\nimport Convert from \"../../components/Convert/Convert\";\r\n\r\nconst Currency = () => {\r\n  return (\r\n    <>\r\n      <h1>Currency page</h1>\r\n      <Convert />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Currency;\r\n","export const getCurrency = (state) => state.currency.currencyTypes;\r\n\r\nexport const getCurrencyArray = (state) => {\r\n  const currency = getCurrency(state);\r\n  if (currency.rates && currency.base) {\r\n    return [currency.base, ...Object.keys(currency.rates)];\r\n  }\r\n};\r\n\r\nexport const getFromCurrency = (state) => {\r\n  const currency = getCurrency(state);\r\n  if (currency.base) {\r\n    return currency.base;\r\n  }\r\n};\r\n\r\nexport const getToCurrency = (state) => {\r\n  const currency = getCurrency(state);\r\n  if (currency.rates) {\r\n    return [Object.keys(currency.rates)[0]];\r\n  }\r\n};\r\n\r\nexport const getExchangeRate = (state) => {\r\n  const currency = getCurrency(state);\r\n  const firstCurrency = getToCurrency(state);\r\n  if (currency && firstCurrency) {\r\n    return currency.rates[firstCurrency];\r\n  }\r\n};\r\n\r\nexport const getFavorites = (state) => state.favorite;\r\nexport const getNumberOfFavorites = (state) => state.favorite.length;\r\nexport const getRegularCurrency = (state) => {\r\n  const currency = getCurrencyArray(state);\r\n  const favorites = getFavorites(state);\r\n  if (currency) {\r\n    return currency.filter((n) => favorites.indexOf(n) === -1);\r\n  }\r\n};\r\n"],"sourceRoot":""}